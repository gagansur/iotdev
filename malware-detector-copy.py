#!/usr/bin/env python
import sys
import re
import smtplib
import base64
import math

def send_email(text):
    sender = 'gagansur@gmail.com'
    receivers = ['gagansur@gmail.com', 'jassysur@gmail.com']

    try:
       mail = smtplib.SMTP_SSL("smtp.gmail.com", 465)
       mail.login("gagansur@gmail.com", "Nauni@123")
       subject = "iot-alert"
       message = 'possible private content transferred {}'.format(text)
       mail.sendmail("gagansur@gmail.com", "gks007@shsu.edu", message)
       mail.quit()
       print "Successfully sent email"
    except SMTPException:
       print "Error: unable to send email"

def write_file(text):
    with open('captured_data.txt', 'a') as the_file:
        the_file.write(text+"\n")# use stdin if it's full                                                        
def process_ipaddr(text):
    ip_addr_data = line.split()
    ip_source0 = ip_addr_data[2]
    ip_source1 = ip_addr_data[3]
    suspicious_information = 'sending data from {0} to {1}'.format(ip_source0, ip_source1)
    write_file(suspicious_information)
    send_email(line)

def generate_frequencies(text):
    frequency = dict()
    for t in text:
        if t in frequency.values():
            value = frequency[t] 
            frequency[t] = value+1
        else:
            frequency[t] =1
    return frequency;

def match_frequencies(text):
    valid_data = "humidity 45.5 temperature 55.5"
    baseline_freq = generate_frequencies(valid_data)
    baseline_keys = baseline_freq.keys()
    incoming_freq = generate_frequencies(text)
    rms_values =[]
    for freq in incoming_freq:
        if freq in baseline_keys:
            base_freq_value = baseline_freq[freq]
            incoming_freq_value = incoming_freq[freq]
            rms_values.append(pow(base_freq_value-incoming_freq_value, 2))
        else:
            incoming_freq_value = incoming_freq[freq]
            rms_values.append(pow(incoming_freq_value,2))
    rms = math.sqrt(sum(rms_values)/len(rms_values))
    return rms

def match_garbage_frequencies(text):
    valid_data = "abcdefghijklmnopqrstuvwxyz01234567890.~`!@#$%^&*()_+"
    baseline_freq = generate_frequencies(valid_data)
    baseline_keys = baseline_freq.keys()
    incoming_freq = generate_frequencies(text)
    rms_values =[]
    for freq in incoming_freq:
        if freq in baseline_keys:
            base_freq_value = baseline_freq[freq]
            incoming_freq_value = incoming_freq[freq]
            rms_values.append(pow(base_freq_value-incoming_freq_value, 2))
        else:
            incoming_freq_value = incoming_freq[freq]
            rms_values.append(pow(incoming_freq_value,2))
    rms = math.sqrt(sum(rms_values)/len(rms_values))
    return rms


def process_invalid_data(text):
    print ("sending email to gagansur@gmail.com")
    rms0 = match_garbage_frequencies(text)
    if rms0>len(text):
        print("ignoring garbage".format(text))
        return
    
    rms =  match_frequencies(text)
    if rms>1.0:
        line = 'HIGH ALERT: possible malware intrusion and data loss {}'.format(text)
        write_file(line)
        send_email(line)
    else:
        line = 'LOW ALERT: possible malware intrusion{}'.format(text)
        write_file(line)

#           22:56:36.229052 IP 192.168.1.184.57912 > 192.168.1.67.8009: Flags [.], ack 991, win 501, options [nop,nop,TS val 2654933558 ecr 188131899], length 0

#math-this->20:35:40.685906 IP 192.168.1.190.22 > 192.168.1.184.49122
#ip_addr_ignore = ".*\\d*[:]{1}\\d*[:]{1}\\d*[.]{1}\\s*IP\\s*\\d*[.]{1}\\d*[.]{1}\\d*[.]{1}\\d*[.]{1}\\d*\\s*>\\s*\\d*[.]{1}\\d*[.]{1}\\d*[.]{1}\\d*[.]{1}\\d*[:]{1}.*"
ip_addr_ignore = ".*\\d+[:]\\d+[:]\\d+[.]\\d+\\s+IP\\s+\\d+[.]\\d+[.]\\d+[.]\\d+[.]\\d+\\s+>\\s+\\d+[.]\\d+[.]\\d+[.]\\d+[.]\\d+.*"

#match-this->humidity 45.56 temperature 75.45
valid_data = ".*humidity\\s+\\d+[.]{1}\\d+\\s+temperature\\s+\\d+[.]{1}\\d+.*"

if not sys.stdin.isatty():
    input_stream = sys.stdin
    for line in input_stream:
        print(line)
        result_ip_addr= re.search(ip_addr_ignore, line)
        if result_ip_addr is not None:
            print ("Info: handling ip addrress {}".format(line))
            process_ipaddr(line)
        else:
            result_valid_data = re.search(valid_data, line)
            if result_valid_data is not None:
                print ("Info: valid data processed {}".format(line))
            else:
                print ("Alert: handling potential malware attack")
                process_invalid_data(line)
            
